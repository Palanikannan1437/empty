{
  "version": 3,
  "sources": ["../index.tsx", "../data-table.tsx", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/core/column.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/core/headers.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Expanding.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/filterFns.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Filters.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Grouping.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Ordering.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Pagination.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Pinning.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/sortingFns.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Sorting.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/features/Visibility.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/core/table.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/core/cell.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/core/row.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/columnHelper.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../node_modules/.pnpm/@tanstack+table-core@8.9.1/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../node_modules/.pnpm/@tanstack+react-table@8.9.1_react-dom@18.2.0_react@18.2.0/node_modules/@tanstack/react-table/src/index.tsx", "../button.tsx", "../../../node_modules/.pnpm/class-variance-authority@0.4.0_typescript@4.9.5/node_modules/class-variance-authority/dist/index.esm.js", "../../../node_modules/.pnpm/clsx@1.2.1/node_modules/clsx/dist/clsx.m.js", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/tw-join.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/class-utils.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/lru-cache.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/modifier-utils.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/config-utils.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/merge-classlist.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/create-tailwind-merge.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/from-theme.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/validators.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/default-config.ts", "../../../node_modules/.pnpm/tailwind-merge@1.12.0/node_modules/tailwind-merge/src/lib/tw-merge.ts", "../lib/utils.ts", "../Table.tsx", "../../../node_modules/.pnpm/lucide-react@0.105.0-alpha.4_react@18.2.0/node_modules/lucide-react/src/defaultAttributes.ts", "../../../node_modules/.pnpm/lucide-react@0.105.0-alpha.4_react@18.2.0/node_modules/lucide-react/src/createReactComponent.ts", "../../../node_modules/.pnpm/lucide-react@0.105.0-alpha.4_react@18.2.0/node_modules/lucide-react/src/icons/arrow-up-down.ts", "../columns.tsx"],
  "sourcesContent": ["import * as React from \"react\";\nexport * from \"./data-table\";\nexport * from \"./columns\";\n\nexport type Contributor = {\n  name: string;\n  home: string;\n  openPRsNumber: number;\n  mergedPRsNumber: number;\n  issuesNumber: number;\n};\n\nexport async function getData(fetchUrl: string): Promise<Contributor[]> {\n  const res = await fetch(`${fetchUrl}/api/data`);\n\n  const data = await res.json();\n\n  const objectArray = [];\n\n  for (const username in data) {\n    if (data.hasOwnProperty(username)) {\n      const user = {\n        name: username,\n        ...data[username],\n      };\n\n      objectArray.push(user);\n    }\n  }\n\n  return objectArray;\n}\n", "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\n\nimport { Button } from \"./button\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"./Table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"text-muted-foreground flex-1 text-sm\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n", "import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "import * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"underline-offset-4 hover:underline text-primary\",\n      },\n      size: {\n        default: \"h-10 py-2 px-4\",\n        sm: \"h-9 px-3 rounded-md\",\n        lg: \"h-11 px-8 rounded-md\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n", "const falsyToString = (value)=>typeof value === \"boolean\" ? \"\".concat(value) : value === 0 ? \"0\" : value;\nexport const cx = function() // @ts-ignore\n{\n    for(var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++){\n        classes[_key] = arguments[_key];\n    }\n    return classes.flat(Infinity).filter(Boolean).join(\" \");\n};\nexport const cva = (base, config)=>{\n    return (props)=>{\n        var ref;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants , defaultVariants  } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1)=>{\n            let { class: cvClass , className: cvClassName , ...compoundVariantOptions } = param1;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n};\n\n\n//# sourceMappingURL=index.esm.js.map", "function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\n\nexport type ClassNameValue = ClassNameArray | string | null | undefined | 0 | false\ntype ClassNameArray = ClassNameValue[]\n\nexport function twJoin(...classLists: ClassNameValue[]): string\nexport function twJoin() {\n    let index = 0\n    let argument: ClassNameValue\n    let resolvedValue: string\n    let string = ''\n\n    while (index < arguments.length) {\n        if ((argument = arguments[index++])) {\n            if ((resolvedValue = toValue(argument))) {\n                string && (string += ' ')\n                string += resolvedValue\n            }\n        }\n    }\n    return string\n}\n\nfunction toValue(mix: ClassNameArray | string) {\n    if (typeof mix === 'string') {\n        return mix\n    }\n\n    let resolvedValue: string\n    let string = ''\n\n    for (let k = 0; k < mix.length; k++) {\n        if (mix[k]) {\n            if ((resolvedValue = toValue(mix[k] as ClassNameArray | string))) {\n                string && (string += ' ')\n                string += resolvedValue\n            }\n        }\n    }\n\n    return string\n}\n", "import { ClassGroup, ClassGroupId, ClassValidator, Config, ThemeGetter, ThemeObject } from './types'\n\nexport interface ClassPartObject {\n    nextPart: Map<string, ClassPartObject>\n    validators: ClassValidatorObject[]\n    classGroupId?: ClassGroupId\n}\n\ninterface ClassValidatorObject {\n    classGroupId: ClassGroupId\n    validator: ClassValidator\n}\n\nconst CLASS_PART_SEPARATOR = '-'\n\nexport function createClassUtils(config: Config) {\n    const classMap = createClassMap(config)\n    const { conflictingClassGroups, conflictingClassGroupModifiers = {} } = config\n\n    function getClassGroupId(className: string) {\n        const classParts = className.split(CLASS_PART_SEPARATOR)\n\n        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n        if (classParts[0] === '' && classParts.length !== 1) {\n            classParts.shift()\n        }\n\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className)\n    }\n\n    function getConflictingClassGroupIds(classGroupId: ClassGroupId, hasPostfixModifier: boolean) {\n        const conflicts = conflictingClassGroups[classGroupId] || []\n\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]!]\n        }\n\n        return conflicts\n    }\n\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds,\n    }\n}\n\nfunction getGroupRecursive(\n    classParts: string[],\n    classPartObject: ClassPartObject,\n): ClassGroupId | undefined {\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId\n    }\n\n    const currentClassPart = classParts[0]!\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart)\n    const classGroupFromNextClassPart = nextClassPartObject\n        ? getGroupRecursive(classParts.slice(1), nextClassPartObject)\n        : undefined\n\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart\n    }\n\n    if (classPartObject.validators.length === 0) {\n        return undefined\n    }\n\n    const classRest = classParts.join(CLASS_PART_SEPARATOR)\n\n    return classPartObject.validators.find(({ validator }) => validator(classRest))?.classGroupId\n}\n\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/\n\nfunction getGroupIdForArbitraryProperty(className: string) {\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)![1]\n        const property = arbitraryPropertyClassName?.substring(\n            0,\n            arbitraryPropertyClassName.indexOf(':'),\n        )\n\n        if (property) {\n            // I use two dots here because one dot is used as prefix for class groups in plugins\n            return 'arbitrary..' + property\n        }\n    }\n}\n\n/**\n * Exported for testing only\n */\nexport function createClassMap(config: Config) {\n    const { theme, prefix } = config\n    const classMap: ClassPartObject = {\n        nextPart: new Map<string, ClassPartObject>(),\n        validators: [],\n    }\n\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(\n        Object.entries(config.classGroups),\n        prefix,\n    )\n\n    prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n        processClassesRecursively(classGroup, classMap, classGroupId, theme)\n    })\n\n    return classMap\n}\n\nfunction processClassesRecursively(\n    classGroup: ClassGroup,\n    classPartObject: ClassPartObject,\n    classGroupId: ClassGroupId,\n    theme: ThemeObject,\n) {\n    classGroup.forEach((classDefinition) => {\n        if (typeof classDefinition === 'string') {\n            const classPartObjectToEdit =\n                classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition)\n            classPartObjectToEdit.classGroupId = classGroupId\n            return\n        }\n\n        if (typeof classDefinition === 'function') {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(\n                    classDefinition(theme),\n                    classPartObject,\n                    classGroupId,\n                    theme,\n                )\n                return\n            }\n\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId,\n            })\n\n            return\n        }\n\n        Object.entries(classDefinition).forEach(([key, classGroup]) => {\n            processClassesRecursively(\n                classGroup,\n                getPart(classPartObject, key),\n                classGroupId,\n                theme,\n            )\n        })\n    })\n}\n\nfunction getPart(classPartObject: ClassPartObject, path: string) {\n    let currentClassPartObject = classPartObject\n\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: new Map(),\n                validators: [],\n            })\n        }\n\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart)!\n    })\n\n    return currentClassPartObject\n}\n\nfunction isThemeGetter(func: ClassValidator | ThemeGetter): func is ThemeGetter {\n    return (func as ThemeGetter).isThemeGetter\n}\n\nfunction getPrefixedClassGroupEntries(\n    classGroupEntries: Array<[classGroupId: string, classGroup: ClassGroup]>,\n    prefix: string | undefined,\n): Array<[classGroupId: string, classGroup: ClassGroup]> {\n    if (!prefix) {\n        return classGroupEntries\n    }\n\n    return classGroupEntries.map(([classGroupId, classGroup]) => {\n        const prefixedClassGroup = classGroup.map((classDefinition) => {\n            if (typeof classDefinition === 'string') {\n                return prefix + classDefinition\n            }\n\n            if (typeof classDefinition === 'object') {\n                return Object.fromEntries(\n                    Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]),\n                )\n            }\n\n            return classDefinition\n        })\n\n        return [classGroupId, prefixedClassGroup]\n    })\n}\n", "// Export is needed because TypeScript complains about an error otherwise:\n// Error: …/tailwind-merge/src/config-utils.ts(8,17): semantic error TS4058: Return type of exported function has or is using name 'LruCache' from external module \"…/tailwind-merge/src/lru-cache\" but cannot be named.\nexport interface LruCache<Key, Value> {\n    get(key: Key): Value | undefined\n    set(key: Key, value: Value): void\n}\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nexport function createLruCache<Key, Value>(maxCacheSize: number): LruCache<Key, Value> {\n    if (maxCacheSize < 1) {\n        return {\n            get: () => undefined,\n            set: () => {},\n        }\n    }\n\n    let cacheSize = 0\n    let cache = new Map<Key, Value>()\n    let previousCache = new Map<Key, Value>()\n\n    function update(key: Key, value: Value) {\n        cache.set(key, value)\n        cacheSize++\n\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0\n            previousCache = cache\n            cache = new Map()\n        }\n    }\n\n    return {\n        get(key) {\n            let value = cache.get(key)\n\n            if (value !== undefined) {\n                return value\n            }\n            if ((value = previousCache.get(key)) !== undefined) {\n                update(key, value)\n                return value\n            }\n        },\n        set(key, value) {\n            if (cache.has(key)) {\n                cache.set(key, value)\n            } else {\n                update(key, value)\n            }\n        },\n    }\n}\n", "import { Config } from './types'\n\nexport const IMPORTANT_MODIFIER = '!'\n\nexport function createSplitModifiers(config: Config) {\n    const separator = config.separator || ':'\n    const isSeparatorSingleCharacter = separator.length === 1\n    const firstSeparatorCharacter = separator[0]\n    const separatorLength = separator.length\n\n    // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n    return function splitModifiers(className: string) {\n        const modifiers = []\n\n        let bracketDepth = 0\n        let modifierStart = 0\n        let postfixModifierPosition: number | undefined\n\n        for (let index = 0; index < className.length; index++) {\n            let currentCharacter = className[index]\n\n            if (bracketDepth === 0) {\n                if (\n                    currentCharacter === firstSeparatorCharacter &&\n                    (isSeparatorSingleCharacter ||\n                        className.slice(index, index + separatorLength) === separator)\n                ) {\n                    modifiers.push(className.slice(modifierStart, index))\n                    modifierStart = index + separatorLength\n                    continue\n                }\n\n                if (currentCharacter === '/') {\n                    postfixModifierPosition = index\n                    continue\n                }\n            }\n\n            if (currentCharacter === '[') {\n                bracketDepth++\n            } else if (currentCharacter === ']') {\n                bracketDepth--\n            }\n        }\n\n        const baseClassNameWithImportantModifier =\n            modifiers.length === 0 ? className : className.substring(modifierStart)\n        const hasImportantModifier =\n            baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n        const baseClassName = hasImportantModifier\n            ? baseClassNameWithImportantModifier.substring(1)\n            : baseClassNameWithImportantModifier\n\n        const maybePostfixModifierPosition =\n            postfixModifierPosition && postfixModifierPosition > modifierStart\n                ? postfixModifierPosition - modifierStart\n                : undefined\n\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition,\n        }\n    }\n}\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nexport function sortModifiers(modifiers: string[]) {\n    if (modifiers.length <= 1) {\n        return modifiers\n    }\n\n    const sortedModifiers: string[] = []\n    let unsortedModifiers: string[] = []\n\n    modifiers.forEach((modifier) => {\n        const isArbitraryVariant = modifier[0] === '['\n\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n            unsortedModifiers = []\n        } else {\n            unsortedModifiers.push(modifier)\n        }\n    })\n\n    sortedModifiers.push(...unsortedModifiers.sort())\n\n    return sortedModifiers\n}\n", "import { createClassUtils } from './class-utils'\nimport { createLruCache } from './lru-cache'\nimport { createSplitModifiers } from './modifier-utils'\nimport { Config } from './types'\n\nexport type ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport function createConfigUtils(config: Config) {\n    return {\n        cache: createLruCache<string, string>(config.cacheSize),\n        splitModifiers: createSplitModifiers(config),\n        ...createClassUtils(config),\n    }\n}\n", "import { ConfigUtils } from './config-utils'\nimport { IMPORTANT_MODIFIER, sortModifiers } from './modifier-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { splitModifiers, getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const {\n                    modifiers,\n                    hasImportantModifier,\n                    baseClassName,\n                    maybePostfixModifierPosition,\n                } = splitModifiers(originalClassName)\n\n                let classGroupId = getClassGroupId(\n                    maybePostfixModifierPosition\n                        ? baseClassName.substring(0, maybePostfixModifierPosition)\n                        : baseClassName,\n                )\n\n                let hasPostfixModifier = Boolean(maybePostfixModifierPosition)\n\n                if (!classGroupId) {\n                    if (!maybePostfixModifierPosition) {\n                        return {\n                            isTailwindClass: false as const,\n                            originalClassName,\n                        }\n                    }\n\n                    classGroupId = getClassGroupId(baseClassName)\n\n                    if (!classGroupId) {\n                        return {\n                            isTailwindClass: false as const,\n                            originalClassName,\n                        }\n                    }\n\n                    hasPostfixModifier = false\n                }\n\n                const variantModifier = sortModifiers(modifiers).join(':')\n\n                const modifierId = hasImportantModifier\n                    ? variantModifier + IMPORTANT_MODIFIER\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifierId,\n                    classGroupId,\n                    originalClassName,\n                    hasPostfixModifier,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifierId, classGroupId, hasPostfixModifier } = parsed\n\n                const classId = modifierId + classGroupId\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach((group) =>\n                    classGroupsInConflict.add(modifierId + group),\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n", "import { createConfigUtils } from './config-utils'\nimport { mergeClassList } from './merge-classlist'\nimport { ClassNameValue, twJoin } from './tw-join'\nimport { Config } from './types'\n\ntype CreateConfigFirst = () => Config\ntype CreateConfigSubsequent = (config: Config) => Config\ntype TailwindMerge = (...classLists: ClassNameValue[]) => string\ntype ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport function createTailwindMerge(\n    ...createConfig: [CreateConfigFirst, ...CreateConfigSubsequent[]]\n): TailwindMerge {\n    let configUtils: ConfigUtils\n    let cacheGet: ConfigUtils['cache']['get']\n    let cacheSet: ConfigUtils['cache']['set']\n    let functionToCall = initTailwindMerge\n\n    function initTailwindMerge(classList: string) {\n        const [firstCreateConfig, ...restCreateConfig] = createConfig\n\n        const config = restCreateConfig.reduce(\n            (previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig),\n            firstCreateConfig(),\n        )\n\n        configUtils = createConfigUtils(config)\n        cacheGet = configUtils.cache.get\n        cacheSet = configUtils.cache.set\n        functionToCall = tailwindMerge\n\n        return tailwindMerge(classList)\n    }\n\n    function tailwindMerge(classList: string) {\n        const cachedResult = cacheGet(classList)\n\n        if (cachedResult) {\n            return cachedResult\n        }\n\n        const result = mergeClassList(classList, configUtils)\n        cacheSet(classList, result)\n\n        return result\n    }\n\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments as any))\n    }\n}\n", "import { ThemeGetter, ThemeObject } from './types'\n\nexport function fromTheme(key: string): ThemeGetter {\n    const themeGetter = (theme: ThemeObject) => theme[key] || []\n\n    themeGetter.isThemeGetter = true as const\n\n    return themeGetter\n}\n", "const arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i\nconst fractionRegex = /^\\d+\\/\\d+$/\nconst stringLengths = new Set(['px', 'full', 'screen'])\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/\nconst lengthUnitRegex =\n    /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))/\n// Shadow always begins with x and y offset separated by underscore\nconst shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n\nexport function isLength(value: string) {\n    return (\n        isNumber(value) ||\n        stringLengths.has(value) ||\n        fractionRegex.test(value) ||\n        isArbitraryLength(value)\n    )\n}\n\nexport function isArbitraryLength(value: string) {\n    return getIsArbitraryValue(value, 'length', isLengthOnly)\n}\n\nexport function isArbitrarySize(value: string) {\n    return getIsArbitraryValue(value, 'size', isNever)\n}\n\nexport function isArbitraryPosition(value: string) {\n    return getIsArbitraryValue(value, 'position', isNever)\n}\n\nexport function isArbitraryUrl(value: string) {\n    return getIsArbitraryValue(value, 'url', isUrl)\n}\n\nexport function isArbitraryNumber(value: string) {\n    return getIsArbitraryValue(value, 'number', isNumber)\n}\n\n/**\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\n */\nexport const isArbitraryWeight = isArbitraryNumber\n\nexport function isNumber(value: string) {\n    return !Number.isNaN(Number(value))\n}\n\nexport function isPercent(value: string) {\n    return value.endsWith('%') && isNumber(value.slice(0, -1))\n}\n\nexport function isInteger(value: string) {\n    return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly)\n}\n\nexport function isArbitraryValue(value: string) {\n    return arbitraryValueRegex.test(value)\n}\n\nexport function isAny() {\n    return true\n}\n\nexport function isTshirtSize(value: string) {\n    return tshirtUnitRegex.test(value)\n}\n\nexport function isArbitraryShadow(value: string) {\n    return getIsArbitraryValue(value, '', isShadow)\n}\n\nfunction getIsArbitraryValue(value: string, label: string, testValue: (value: string) => boolean) {\n    const result = arbitraryValueRegex.exec(value)\n\n    if (result) {\n        if (result[1]) {\n            return result[1] === label\n        }\n\n        return testValue(result[2]!)\n    }\n\n    return false\n}\n\nfunction isLengthOnly(value: string) {\n    return lengthUnitRegex.test(value)\n}\n\nfunction isNever() {\n    return false\n}\n\nfunction isUrl(value: string) {\n    return value.startsWith('url(')\n}\n\nfunction isIntegerOnly(value: string) {\n    return Number.isInteger(Number(value))\n}\n\nfunction isShadow(value: string) {\n    return shadowRegex.test(value)\n}\n", "import { fromTheme } from './from-theme'\nimport { Config } from './types'\nimport {\n    isAny,\n    isArbitraryLength,\n    isArbitraryNumber,\n    isArbitraryPosition,\n    isArbitraryShadow,\n    isArbitrarySize,\n    isArbitraryUrl,\n    isArbitraryValue,\n    isInteger,\n    isLength,\n    isNumber,\n    isPercent,\n    isTshirtSize,\n} from './validators'\n\nexport function getDefaultConfig() {\n    const colors = fromTheme('colors')\n    const spacing = fromTheme('spacing')\n    const blur = fromTheme('blur')\n    const brightness = fromTheme('brightness')\n    const borderColor = fromTheme('borderColor')\n    const borderRadius = fromTheme('borderRadius')\n    const borderSpacing = fromTheme('borderSpacing')\n    const borderWidth = fromTheme('borderWidth')\n    const contrast = fromTheme('contrast')\n    const grayscale = fromTheme('grayscale')\n    const hueRotate = fromTheme('hueRotate')\n    const invert = fromTheme('invert')\n    const gap = fromTheme('gap')\n    const gradientColorStops = fromTheme('gradientColorStops')\n    const gradientColorStopPositions = fromTheme('gradientColorStopPositions')\n    const inset = fromTheme('inset')\n    const margin = fromTheme('margin')\n    const opacity = fromTheme('opacity')\n    const padding = fromTheme('padding')\n    const saturate = fromTheme('saturate')\n    const scale = fromTheme('scale')\n    const sepia = fromTheme('sepia')\n    const skew = fromTheme('skew')\n    const space = fromTheme('space')\n    const translate = fromTheme('translate')\n\n    const getOverscroll = () => ['auto', 'contain', 'none'] as const\n    const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'] as const\n    const getSpacingWithAuto = () => ['auto', spacing] as const\n    const getLengthWithEmpty = () => ['', isLength] as const\n    const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue] as const\n    const getPositions = () =>\n        [\n            'bottom',\n            'center',\n            'left',\n            'left-bottom',\n            'left-top',\n            'right',\n            'right-bottom',\n            'right-top',\n            'top',\n        ] as const\n    const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'] as const\n    const getBlendModes = () =>\n        [\n            'normal',\n            'multiply',\n            'screen',\n            'overlay',\n            'darken',\n            'lighten',\n            'color-dodge',\n            'color-burn',\n            'hard-light',\n            'soft-light',\n            'difference',\n            'exclusion',\n            'hue',\n            'saturation',\n            'color',\n            'luminosity',\n            'plus-lighter',\n        ] as const\n    const getAlign = () =>\n        ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'] as const\n    const getZeroAndEmpty = () => ['', '0', isArbitraryValue] as const\n    const getBreaks = () =>\n        ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'] as const\n    const getNumber = () => [isNumber, isArbitraryNumber]\n    const getNumberAndArbitrary = () => [isNumber, isArbitraryValue]\n\n    return {\n        cacheSize: 500,\n        theme: {\n            colors: [isAny],\n            spacing: [isLength],\n            blur: ['none', '', isTshirtSize, isArbitraryLength],\n            brightness: getNumber(),\n            borderColor: [colors],\n            borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryLength],\n            borderSpacing: [spacing],\n            borderWidth: getLengthWithEmpty(),\n            contrast: getNumber(),\n            grayscale: getZeroAndEmpty(),\n            hueRotate: getNumberAndArbitrary(),\n            invert: getZeroAndEmpty(),\n            gap: [spacing],\n            gradientColorStops: [colors],\n            gradientColorStopPositions: [isPercent, isArbitraryLength],\n            inset: getSpacingWithAuto(),\n            margin: getSpacingWithAuto(),\n            opacity: getNumber(),\n            padding: [spacing],\n            saturate: getNumber(),\n            scale: getNumber(),\n            sepia: getZeroAndEmpty(),\n            skew: getNumberAndArbitrary(),\n            space: [spacing],\n            translate: [spacing],\n        },\n        classGroups: {\n            // Layout\n            /**\n             * Aspect Ratio\n             * @see https://tailwindcss.com/docs/aspect-ratio\n             */\n            aspect: [{ aspect: ['auto', 'square', 'video', isArbitraryValue] }],\n            /**\n             * Container\n             * @see https://tailwindcss.com/docs/container\n             */\n            container: ['container'],\n            /**\n             * Columns\n             * @see https://tailwindcss.com/docs/columns\n             */\n            columns: [{ columns: [isTshirtSize] }],\n            /**\n             * Break After\n             * @see https://tailwindcss.com/docs/break-after\n             */\n            'break-after': [{ 'break-after': getBreaks() }],\n            /**\n             * Break Before\n             * @see https://tailwindcss.com/docs/break-before\n             */\n            'break-before': [{ 'break-before': getBreaks() }],\n            /**\n             * Break Inside\n             * @see https://tailwindcss.com/docs/break-inside\n             */\n            'break-inside': [{ 'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column'] }],\n            /**\n             * Box Decoration Break\n             * @see https://tailwindcss.com/docs/box-decoration-break\n             */\n            'box-decoration': [{ 'box-decoration': ['slice', 'clone'] }],\n            /**\n             * Box Sizing\n             * @see https://tailwindcss.com/docs/box-sizing\n             */\n            box: [{ box: ['border', 'content'] }],\n            /**\n             * Display\n             * @see https://tailwindcss.com/docs/display\n             */\n            display: [\n                'block',\n                'inline-block',\n                'inline',\n                'flex',\n                'inline-flex',\n                'table',\n                'inline-table',\n                'table-caption',\n                'table-cell',\n                'table-column',\n                'table-column-group',\n                'table-footer-group',\n                'table-header-group',\n                'table-row-group',\n                'table-row',\n                'flow-root',\n                'grid',\n                'inline-grid',\n                'contents',\n                'list-item',\n                'hidden',\n            ],\n            /**\n             * Floats\n             * @see https://tailwindcss.com/docs/float\n             */\n            float: [{ float: ['right', 'left', 'none'] }],\n            /**\n             * Clear\n             * @see https://tailwindcss.com/docs/clear\n             */\n            clear: [{ clear: ['left', 'right', 'both', 'none'] }],\n            /**\n             * Isolation\n             * @see https://tailwindcss.com/docs/isolation\n             */\n            isolation: ['isolate', 'isolation-auto'],\n            /**\n             * Object Fit\n             * @see https://tailwindcss.com/docs/object-fit\n             */\n            'object-fit': [{ object: ['contain', 'cover', 'fill', 'none', 'scale-down'] }],\n            /**\n             * Object Position\n             * @see https://tailwindcss.com/docs/object-position\n             */\n            'object-position': [{ object: [...getPositions(), isArbitraryValue] }],\n            /**\n             * Overflow\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            overflow: [{ overflow: getOverflow() }],\n            /**\n             * Overflow X\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            'overflow-x': [{ 'overflow-x': getOverflow() }],\n            /**\n             * Overflow Y\n             * @see https://tailwindcss.com/docs/overflow\n             */\n            'overflow-y': [{ 'overflow-y': getOverflow() }],\n            /**\n             * Overscroll Behavior\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            overscroll: [{ overscroll: getOverscroll() }],\n            /**\n             * Overscroll Behavior X\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            'overscroll-x': [{ 'overscroll-x': getOverscroll() }],\n            /**\n             * Overscroll Behavior Y\n             * @see https://tailwindcss.com/docs/overscroll-behavior\n             */\n            'overscroll-y': [{ 'overscroll-y': getOverscroll() }],\n            /**\n             * Position\n             * @see https://tailwindcss.com/docs/position\n             */\n            position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n            /**\n             * Top / Right / Bottom / Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            inset: [{ inset: [inset] }],\n            /**\n             * Right / Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            'inset-x': [{ 'inset-x': [inset] }],\n            /**\n             * Top / Bottom\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            'inset-y': [{ 'inset-y': [inset] }],\n            /**\n             * Start\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            start: [{ start: [inset] }],\n            /**\n             * End\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            end: [{ end: [inset] }],\n            /**\n             * Top\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            top: [{ top: [inset] }],\n            /**\n             * Right\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            right: [{ right: [inset] }],\n            /**\n             * Bottom\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            bottom: [{ bottom: [inset] }],\n            /**\n             * Left\n             * @see https://tailwindcss.com/docs/top-right-bottom-left\n             */\n            left: [{ left: [inset] }],\n            /**\n             * Visibility\n             * @see https://tailwindcss.com/docs/visibility\n             */\n            visibility: ['visible', 'invisible', 'collapse'],\n            /**\n             * Z-Index\n             * @see https://tailwindcss.com/docs/z-index\n             */\n            z: [{ z: ['auto', isInteger] }],\n            // Flexbox and Grid\n            /**\n             * Flex Basis\n             * @see https://tailwindcss.com/docs/flex-basis\n             */\n            basis: [{ basis: [spacing] }],\n            /**\n             * Flex Direction\n             * @see https://tailwindcss.com/docs/flex-direction\n             */\n            'flex-direction': [{ flex: ['row', 'row-reverse', 'col', 'col-reverse'] }],\n            /**\n             * Flex Wrap\n             * @see https://tailwindcss.com/docs/flex-wrap\n             */\n            'flex-wrap': [{ flex: ['wrap', 'wrap-reverse', 'nowrap'] }],\n            /**\n             * Flex\n             * @see https://tailwindcss.com/docs/flex\n             */\n            flex: [{ flex: ['1', 'auto', 'initial', 'none', isArbitraryValue] }],\n            /**\n             * Flex Grow\n             * @see https://tailwindcss.com/docs/flex-grow\n             */\n            grow: [{ grow: getZeroAndEmpty() }],\n            /**\n             * Flex Shrink\n             * @see https://tailwindcss.com/docs/flex-shrink\n             */\n            shrink: [{ shrink: getZeroAndEmpty() }],\n            /**\n             * Order\n             * @see https://tailwindcss.com/docs/order\n             */\n            order: [{ order: ['first', 'last', 'none', isInteger] }],\n            /**\n             * Grid Template Columns\n             * @see https://tailwindcss.com/docs/grid-template-columns\n             */\n            'grid-cols': [{ 'grid-cols': [isAny] }],\n            /**\n             * Grid Column Start / End\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-start-end': [{ col: ['auto', { span: [isInteger] }, isArbitraryValue] }],\n            /**\n             * Grid Column Start\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-start': [{ 'col-start': getNumberWithAutoAndArbitrary() }],\n            /**\n             * Grid Column End\n             * @see https://tailwindcss.com/docs/grid-column\n             */\n            'col-end': [{ 'col-end': getNumberWithAutoAndArbitrary() }],\n            /**\n             * Grid Template Rows\n             * @see https://tailwindcss.com/docs/grid-template-rows\n             */\n            'grid-rows': [{ 'grid-rows': [isAny] }],\n            /**\n             * Grid Row Start / End\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-start-end': [{ row: ['auto', { span: [isInteger] }, isArbitraryValue] }],\n            /**\n             * Grid Row Start\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-start': [{ 'row-start': getNumberWithAutoAndArbitrary() }],\n            /**\n             * Grid Row End\n             * @see https://tailwindcss.com/docs/grid-row\n             */\n            'row-end': [{ 'row-end': getNumberWithAutoAndArbitrary() }],\n            /**\n             * Grid Auto Flow\n             * @see https://tailwindcss.com/docs/grid-auto-flow\n             */\n            'grid-flow': [{ 'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense'] }],\n            /**\n             * Grid Auto Columns\n             * @see https://tailwindcss.com/docs/grid-auto-columns\n             */\n            'auto-cols': [{ 'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue] }],\n            /**\n             * Grid Auto Rows\n             * @see https://tailwindcss.com/docs/grid-auto-rows\n             */\n            'auto-rows': [{ 'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue] }],\n            /**\n             * Gap\n             * @see https://tailwindcss.com/docs/gap\n             */\n            gap: [{ gap: [gap] }],\n            /**\n             * Gap X\n             * @see https://tailwindcss.com/docs/gap\n             */\n            'gap-x': [{ 'gap-x': [gap] }],\n            /**\n             * Gap Y\n             * @see https://tailwindcss.com/docs/gap\n             */\n            'gap-y': [{ 'gap-y': [gap] }],\n            /**\n             * Justify Content\n             * @see https://tailwindcss.com/docs/justify-content\n             */\n            'justify-content': [{ justify: ['normal', ...getAlign()] }],\n            /**\n             * Justify Items\n             * @see https://tailwindcss.com/docs/justify-items\n             */\n            'justify-items': [{ 'justify-items': ['start', 'end', 'center', 'stretch'] }],\n            /**\n             * Justify Self\n             * @see https://tailwindcss.com/docs/justify-self\n             */\n            'justify-self': [{ 'justify-self': ['auto', 'start', 'end', 'center', 'stretch'] }],\n            /**\n             * Align Content\n             * @see https://tailwindcss.com/docs/align-content\n             */\n            'align-content': [{ content: ['normal', ...getAlign(), 'baseline'] }],\n            /**\n             * Align Items\n             * @see https://tailwindcss.com/docs/align-items\n             */\n            'align-items': [{ items: ['start', 'end', 'center', 'baseline', 'stretch'] }],\n            /**\n             * Align Self\n             * @see https://tailwindcss.com/docs/align-self\n             */\n            'align-self': [{ self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline'] }],\n            /**\n             * Place Content\n             * @see https://tailwindcss.com/docs/place-content\n             */\n            'place-content': [{ 'place-content': [...getAlign(), 'baseline'] }],\n            /**\n             * Place Items\n             * @see https://tailwindcss.com/docs/place-items\n             */\n            'place-items': [{ 'place-items': ['start', 'end', 'center', 'baseline', 'stretch'] }],\n            /**\n             * Place Self\n             * @see https://tailwindcss.com/docs/place-self\n             */\n            'place-self': [{ 'place-self': ['auto', 'start', 'end', 'center', 'stretch'] }],\n            // Spacing\n            /**\n             * Padding\n             * @see https://tailwindcss.com/docs/padding\n             */\n            p: [{ p: [padding] }],\n            /**\n             * Padding X\n             * @see https://tailwindcss.com/docs/padding\n             */\n            px: [{ px: [padding] }],\n            /**\n             * Padding Y\n             * @see https://tailwindcss.com/docs/padding\n             */\n            py: [{ py: [padding] }],\n            /**\n             * Padding Start\n             * @see https://tailwindcss.com/docs/padding\n             */\n            ps: [{ ps: [padding] }],\n            /**\n             * Padding End\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pe: [{ pe: [padding] }],\n            /**\n             * Padding Top\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pt: [{ pt: [padding] }],\n            /**\n             * Padding Right\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pr: [{ pr: [padding] }],\n            /**\n             * Padding Bottom\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pb: [{ pb: [padding] }],\n            /**\n             * Padding Left\n             * @see https://tailwindcss.com/docs/padding\n             */\n            pl: [{ pl: [padding] }],\n            /**\n             * Margin\n             * @see https://tailwindcss.com/docs/margin\n             */\n            m: [{ m: [margin] }],\n            /**\n             * Margin X\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mx: [{ mx: [margin] }],\n            /**\n             * Margin Y\n             * @see https://tailwindcss.com/docs/margin\n             */\n            my: [{ my: [margin] }],\n            /**\n             * Margin Start\n             * @see https://tailwindcss.com/docs/margin\n             */\n            ms: [{ ms: [margin] }],\n            /**\n             * Margin End\n             * @see https://tailwindcss.com/docs/margin\n             */\n            me: [{ me: [margin] }],\n            /**\n             * Margin Top\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mt: [{ mt: [margin] }],\n            /**\n             * Margin Right\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mr: [{ mr: [margin] }],\n            /**\n             * Margin Bottom\n             * @see https://tailwindcss.com/docs/margin\n             */\n            mb: [{ mb: [margin] }],\n            /**\n             * Margin Left\n             * @see https://tailwindcss.com/docs/margin\n             */\n            ml: [{ ml: [margin] }],\n            /**\n             * Space Between X\n             * @see https://tailwindcss.com/docs/space\n             */\n            'space-x': [{ 'space-x': [space] }],\n            /**\n             * Space Between X Reverse\n             * @see https://tailwindcss.com/docs/space\n             */\n            'space-x-reverse': ['space-x-reverse'],\n            /**\n             * Space Between Y\n             * @see https://tailwindcss.com/docs/space\n             */\n            'space-y': [{ 'space-y': [space] }],\n            /**\n             * Space Between Y Reverse\n             * @see https://tailwindcss.com/docs/space\n             */\n            'space-y-reverse': ['space-y-reverse'],\n            // Sizing\n            /**\n             * Width\n             * @see https://tailwindcss.com/docs/width\n             */\n            w: [{ w: ['auto', 'min', 'max', 'fit', spacing] }],\n            /**\n             * Min-Width\n             * @see https://tailwindcss.com/docs/min-width\n             */\n            'min-w': [{ 'min-w': ['min', 'max', 'fit', isLength] }],\n            /**\n             * Max-Width\n             * @see https://tailwindcss.com/docs/max-width\n             */\n            'max-w': [\n                {\n                    'max-w': [\n                        '0',\n                        'none',\n                        'full',\n                        'min',\n                        'max',\n                        'fit',\n                        'prose',\n                        { screen: [isTshirtSize] },\n                        isTshirtSize,\n                        isArbitraryLength,\n                    ],\n                },\n            ],\n            /**\n             * Height\n             * @see https://tailwindcss.com/docs/height\n             */\n            h: [{ h: [spacing, 'auto', 'min', 'max', 'fit'] }],\n            /**\n             * Min-Height\n             * @see https://tailwindcss.com/docs/min-height\n             */\n            'min-h': [{ 'min-h': ['min', 'max', 'fit', isLength] }],\n            /**\n             * Max-Height\n             * @see https://tailwindcss.com/docs/max-height\n             */\n            'max-h': [{ 'max-h': [spacing, 'min', 'max', 'fit'] }],\n            // Typography\n            /**\n             * Font Size\n             * @see https://tailwindcss.com/docs/font-size\n             */\n            'font-size': [{ text: ['base', isTshirtSize, isArbitraryLength] }],\n            /**\n             * Font Smoothing\n             * @see https://tailwindcss.com/docs/font-smoothing\n             */\n            'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n            /**\n             * Font Style\n             * @see https://tailwindcss.com/docs/font-style\n             */\n            'font-style': ['italic', 'not-italic'],\n            /**\n             * Font Weight\n             * @see https://tailwindcss.com/docs/font-weight\n             */\n            'font-weight': [\n                {\n                    font: [\n                        'thin',\n                        'extralight',\n                        'light',\n                        'normal',\n                        'medium',\n                        'semibold',\n                        'bold',\n                        'extrabold',\n                        'black',\n                        isArbitraryNumber,\n                    ],\n                },\n            ],\n            /**\n             * Font Family\n             * @see https://tailwindcss.com/docs/font-family\n             */\n            'font-family': [{ font: [isAny] }],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-normal': ['normal-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-ordinal': ['ordinal'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-slashed-zero': ['slashed-zero'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n            /**\n             * Font Variant Numeric\n             * @see https://tailwindcss.com/docs/font-variant-numeric\n             */\n            'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],\n            /**\n             * Letter Spacing\n             * @see https://tailwindcss.com/docs/letter-spacing\n             */\n            tracking: [\n                {\n                    tracking: [\n                        'tighter',\n                        'tight',\n                        'normal',\n                        'wide',\n                        'wider',\n                        'widest',\n                        isArbitraryLength,\n                    ],\n                },\n            ],\n            /**\n             * Line Clamp\n             * @see https://tailwindcss.com/docs/line-clamp\n             */\n            'line-clamp': [{ 'line-clamp': ['none', isNumber, isArbitraryNumber] }],\n            /**\n             * Line Height\n             * @see https://tailwindcss.com/docs/line-height\n             */\n            leading: [\n                { leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength] },\n            ],\n            /**\n             * List Style Image\n             * @see https://tailwindcss.com/docs/list-style-image\n             */\n            'list-image': [{ 'list-image': ['none', isArbitraryValue] }],\n            /**\n             * List Style Type\n             * @see https://tailwindcss.com/docs/list-style-type\n             */\n            'list-style-type': [{ list: ['none', 'disc', 'decimal', isArbitraryValue] }],\n            /**\n             * List Style Position\n             * @see https://tailwindcss.com/docs/list-style-position\n             */\n            'list-style-position': [{ list: ['inside', 'outside'] }],\n            /**\n             * Placeholder Color\n             * @deprecated since Tailwind CSS v3.0.0\n             * @see https://tailwindcss.com/docs/placeholder-color\n             */\n            'placeholder-color': [{ placeholder: [colors] }],\n            /**\n             * Placeholder Opacity\n             * @see https://tailwindcss.com/docs/placeholder-opacity\n             */\n            'placeholder-opacity': [{ 'placeholder-opacity': [opacity] }],\n            /**\n             * Text Alignment\n             * @see https://tailwindcss.com/docs/text-align\n             */\n            'text-alignment': [{ text: ['left', 'center', 'right', 'justify', 'start', 'end'] }],\n            /**\n             * Text Color\n             * @see https://tailwindcss.com/docs/text-color\n             */\n            'text-color': [{ text: [colors] }],\n            /**\n             * Text Opacity\n             * @see https://tailwindcss.com/docs/text-opacity\n             */\n            'text-opacity': [{ 'text-opacity': [opacity] }],\n            /**\n             * Text Decoration\n             * @see https://tailwindcss.com/docs/text-decoration\n             */\n            'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n            /**\n             * Text Decoration Style\n             * @see https://tailwindcss.com/docs/text-decoration-style\n             */\n            'text-decoration-style': [{ decoration: [...getLineStyles(), 'wavy'] }],\n            /**\n             * Text Decoration Thickness\n             * @see https://tailwindcss.com/docs/text-decoration-thickness\n             */\n            'text-decoration-thickness': [{ decoration: ['auto', 'from-font', isLength] }],\n            /**\n             * Text Underline Offset\n             * @see https://tailwindcss.com/docs/text-underline-offset\n             */\n            'underline-offset': [{ 'underline-offset': ['auto', isLength] }],\n            /**\n             * Text Decoration Color\n             * @see https://tailwindcss.com/docs/text-decoration-color\n             */\n            'text-decoration-color': [{ decoration: [colors] }],\n            /**\n             * Text Transform\n             * @see https://tailwindcss.com/docs/text-transform\n             */\n            'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n            /**\n             * Text Overflow\n             * @see https://tailwindcss.com/docs/text-overflow\n             */\n            'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n            /**\n             * Text Indent\n             * @see https://tailwindcss.com/docs/text-indent\n             */\n            indent: [{ indent: [spacing] }],\n            /**\n             * Vertical Alignment\n             * @see https://tailwindcss.com/docs/vertical-align\n             */\n            'vertical-align': [\n                {\n                    align: [\n                        'baseline',\n                        'top',\n                        'middle',\n                        'bottom',\n                        'text-top',\n                        'text-bottom',\n                        'sub',\n                        'super',\n                        isArbitraryLength,\n                    ],\n                },\n            ],\n            /**\n             * Whitespace\n             * @see https://tailwindcss.com/docs/whitespace\n             */\n            whitespace: [\n                { whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces'] },\n            ],\n            /**\n             * Word Break\n             * @see https://tailwindcss.com/docs/word-break\n             */\n            break: [{ break: ['normal', 'words', 'all', 'keep'] }],\n            /**\n             * Hyphens\n             * @see https://tailwindcss.com/docs/hyphens\n             */\n            hyphens: [{ hyphens: ['none', 'manual', 'auto'] }],\n            /**\n             * Content\n             * @see https://tailwindcss.com/docs/content\n             */\n            content: [{ content: ['none', isArbitraryValue] }],\n            // Backgrounds\n            /**\n             * Background Attachment\n             * @see https://tailwindcss.com/docs/background-attachment\n             */\n            'bg-attachment': [{ bg: ['fixed', 'local', 'scroll'] }],\n            /**\n             * Background Clip\n             * @see https://tailwindcss.com/docs/background-clip\n             */\n            'bg-clip': [{ 'bg-clip': ['border', 'padding', 'content', 'text'] }],\n            /**\n             * Background Opacity\n             * @deprecated since Tailwind CSS v3.0.0\n             * @see https://tailwindcss.com/docs/background-opacity\n             */\n            'bg-opacity': [{ 'bg-opacity': [opacity] }],\n            /**\n             * Background Origin\n             * @see https://tailwindcss.com/docs/background-origin\n             */\n            'bg-origin': [{ 'bg-origin': ['border', 'padding', 'content'] }],\n            /**\n             * Background Position\n             * @see https://tailwindcss.com/docs/background-position\n             */\n            'bg-position': [{ bg: [...getPositions(), isArbitraryPosition] }],\n            /**\n             * Background Repeat\n             * @see https://tailwindcss.com/docs/background-repeat\n             */\n            'bg-repeat': [{ bg: ['no-repeat', { repeat: ['', 'x', 'y', 'round', 'space'] }] }],\n            /**\n             * Background Size\n             * @see https://tailwindcss.com/docs/background-size\n             */\n            'bg-size': [{ bg: ['auto', 'cover', 'contain', isArbitrarySize] }],\n            /**\n             * Background Image\n             * @see https://tailwindcss.com/docs/background-image\n             */\n            'bg-image': [\n                {\n                    bg: [\n                        'none',\n                        { 'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'] },\n                        isArbitraryUrl,\n                    ],\n                },\n            ],\n            /**\n             * Background Color\n             * @see https://tailwindcss.com/docs/background-color\n             */\n            'bg-color': [{ bg: [colors] }],\n            /**\n             * Gradient Color Stops From Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-from-pos': [{ from: [gradientColorStopPositions] }],\n            /**\n             * Gradient Color Stops Via Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-via-pos': [{ via: [gradientColorStopPositions] }],\n            /**\n             * Gradient Color Stops To Position\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-to-pos': [{ to: [gradientColorStopPositions] }],\n            /**\n             * Gradient Color Stops From\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-from': [{ from: [gradientColorStops] }],\n            /**\n             * Gradient Color Stops Via\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-via': [{ via: [gradientColorStops] }],\n            /**\n             * Gradient Color Stops To\n             * @see https://tailwindcss.com/docs/gradient-color-stops\n             */\n            'gradient-to': [{ to: [gradientColorStops] }],\n            // Borders\n            /**\n             * Border Radius\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            rounded: [{ rounded: [borderRadius] }],\n            /**\n             * Border Radius Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-s': [{ 'rounded-s': [borderRadius] }],\n            /**\n             * Border Radius End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-e': [{ 'rounded-e': [borderRadius] }],\n            /**\n             * Border Radius Top\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-t': [{ 'rounded-t': [borderRadius] }],\n            /**\n             * Border Radius Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-r': [{ 'rounded-r': [borderRadius] }],\n            /**\n             * Border Radius Bottom\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-b': [{ 'rounded-b': [borderRadius] }],\n            /**\n             * Border Radius Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-l': [{ 'rounded-l': [borderRadius] }],\n            /**\n             * Border Radius Start Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-ss': [{ 'rounded-ss': [borderRadius] }],\n            /**\n             * Border Radius Start End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-se': [{ 'rounded-se': [borderRadius] }],\n            /**\n             * Border Radius End End\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-ee': [{ 'rounded-ee': [borderRadius] }],\n            /**\n             * Border Radius End Start\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-es': [{ 'rounded-es': [borderRadius] }],\n            /**\n             * Border Radius Top Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-tl': [{ 'rounded-tl': [borderRadius] }],\n            /**\n             * Border Radius Top Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-tr': [{ 'rounded-tr': [borderRadius] }],\n            /**\n             * Border Radius Bottom Right\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-br': [{ 'rounded-br': [borderRadius] }],\n            /**\n             * Border Radius Bottom Left\n             * @see https://tailwindcss.com/docs/border-radius\n             */\n            'rounded-bl': [{ 'rounded-bl': [borderRadius] }],\n            /**\n             * Border Width\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w': [{ border: [borderWidth] }],\n            /**\n             * Border Width X\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-x': [{ 'border-x': [borderWidth] }],\n            /**\n             * Border Width Y\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-y': [{ 'border-y': [borderWidth] }],\n            /**\n             * Border Width Start\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-s': [{ 'border-s': [borderWidth] }],\n            /**\n             * Border Width End\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-e': [{ 'border-e': [borderWidth] }],\n            /**\n             * Border Width Top\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-t': [{ 'border-t': [borderWidth] }],\n            /**\n             * Border Width Right\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-r': [{ 'border-r': [borderWidth] }],\n            /**\n             * Border Width Bottom\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-b': [{ 'border-b': [borderWidth] }],\n            /**\n             * Border Width Left\n             * @see https://tailwindcss.com/docs/border-width\n             */\n            'border-w-l': [{ 'border-l': [borderWidth] }],\n            /**\n             * Border Opacity\n             * @see https://tailwindcss.com/docs/border-opacity\n             */\n            'border-opacity': [{ 'border-opacity': [opacity] }],\n            /**\n             * Border Style\n             * @see https://tailwindcss.com/docs/border-style\n             */\n            'border-style': [{ border: [...getLineStyles(), 'hidden'] }],\n            /**\n             * Divide Width X\n             * @see https://tailwindcss.com/docs/divide-width\n             */\n            'divide-x': [{ 'divide-x': [borderWidth] }],\n            /**\n             * Divide Width X Reverse\n             * @see https://tailwindcss.com/docs/divide-width\n             */\n            'divide-x-reverse': ['divide-x-reverse'],\n            /**\n             * Divide Width Y\n             * @see https://tailwindcss.com/docs/divide-width\n             */\n            'divide-y': [{ 'divide-y': [borderWidth] }],\n            /**\n             * Divide Width Y Reverse\n             * @see https://tailwindcss.com/docs/divide-width\n             */\n            'divide-y-reverse': ['divide-y-reverse'],\n            /**\n             * Divide Opacity\n             * @see https://tailwindcss.com/docs/divide-opacity\n             */\n            'divide-opacity': [{ 'divide-opacity': [opacity] }],\n            /**\n             * Divide Style\n             * @see https://tailwindcss.com/docs/divide-style\n             */\n            'divide-style': [{ divide: getLineStyles() }],\n            /**\n             * Border Color\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color': [{ border: [borderColor] }],\n            /**\n             * Border Color X\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-x': [{ 'border-x': [borderColor] }],\n            /**\n             * Border Color Y\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-y': [{ 'border-y': [borderColor] }],\n            /**\n             * Border Color Top\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-t': [{ 'border-t': [borderColor] }],\n            /**\n             * Border Color Right\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-r': [{ 'border-r': [borderColor] }],\n            /**\n             * Border Color Bottom\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-b': [{ 'border-b': [borderColor] }],\n            /**\n             * Border Color Left\n             * @see https://tailwindcss.com/docs/border-color\n             */\n            'border-color-l': [{ 'border-l': [borderColor] }],\n            /**\n             * Divide Color\n             * @see https://tailwindcss.com/docs/divide-color\n             */\n            'divide-color': [{ divide: [borderColor] }],\n            /**\n             * Outline Style\n             * @see https://tailwindcss.com/docs/outline-style\n             */\n            'outline-style': [{ outline: ['', ...getLineStyles()] }],\n            /**\n             * Outline Offset\n             * @see https://tailwindcss.com/docs/outline-offset\n             */\n            'outline-offset': [{ 'outline-offset': [isLength] }],\n            /**\n             * Outline Width\n             * @see https://tailwindcss.com/docs/outline-width\n             */\n            'outline-w': [{ outline: [isLength] }],\n            /**\n             * Outline Color\n             * @see https://tailwindcss.com/docs/outline-color\n             */\n            'outline-color': [{ outline: [colors] }],\n            /**\n             * Ring Width\n             * @see https://tailwindcss.com/docs/ring-width\n             */\n            'ring-w': [{ ring: getLengthWithEmpty() }],\n            /**\n             * Ring Width Inset\n             * @see https://tailwindcss.com/docs/ring-width\n             */\n            'ring-w-inset': ['ring-inset'],\n            /**\n             * Ring Color\n             * @see https://tailwindcss.com/docs/ring-color\n             */\n            'ring-color': [{ ring: [colors] }],\n            /**\n             * Ring Opacity\n             * @see https://tailwindcss.com/docs/ring-opacity\n             */\n            'ring-opacity': [{ 'ring-opacity': [opacity] }],\n            /**\n             * Ring Offset Width\n             * @see https://tailwindcss.com/docs/ring-offset-width\n             */\n            'ring-offset-w': [{ 'ring-offset': [isLength] }],\n            /**\n             * Ring Offset Color\n             * @see https://tailwindcss.com/docs/ring-offset-color\n             */\n            'ring-offset-color': [{ 'ring-offset': [colors] }],\n            // Effects\n            /**\n             * Box Shadow\n             * @see https://tailwindcss.com/docs/box-shadow\n             */\n            shadow: [{ shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow] }],\n            /**\n             * Box Shadow Color\n             * @see https://tailwindcss.com/docs/box-shadow-color\n             */\n            'shadow-color': [{ shadow: [isAny] }],\n            /**\n             * Opacity\n             * @see https://tailwindcss.com/docs/opacity\n             */\n            opacity: [{ opacity: [opacity] }],\n            /**\n             * Mix Beldn Mode\n             * @see https://tailwindcss.com/docs/mix-blend-mode\n             */\n            'mix-blend': [{ 'mix-blend': getBlendModes() }],\n            /**\n             * Background Blend Mode\n             * @see https://tailwindcss.com/docs/background-blend-mode\n             */\n            'bg-blend': [{ 'bg-blend': getBlendModes() }],\n            // Filters\n            /**\n             * Filter\n             * @deprecated since Tailwind CSS v3.0.0\n             * @see https://tailwindcss.com/docs/filter\n             */\n            filter: [{ filter: ['', 'none'] }],\n            /**\n             * Blur\n             * @see https://tailwindcss.com/docs/blur\n             */\n            blur: [{ blur: [blur] }],\n            /**\n             * Brightness\n             * @see https://tailwindcss.com/docs/brightness\n             */\n            brightness: [{ brightness: [brightness] }],\n            /**\n             * Contrast\n             * @see https://tailwindcss.com/docs/contrast\n             */\n            contrast: [{ contrast: [contrast] }],\n            /**\n             * Drop Shadow\n             * @see https://tailwindcss.com/docs/drop-shadow\n             */\n            'drop-shadow': [{ 'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue] }],\n            /**\n             * Grayscale\n             * @see https://tailwindcss.com/docs/grayscale\n             */\n            grayscale: [{ grayscale: [grayscale] }],\n            /**\n             * Hue Rotate\n             * @see https://tailwindcss.com/docs/hue-rotate\n             */\n            'hue-rotate': [{ 'hue-rotate': [hueRotate] }],\n            /**\n             * Invert\n             * @see https://tailwindcss.com/docs/invert\n             */\n            invert: [{ invert: [invert] }],\n            /**\n             * Saturate\n             * @see https://tailwindcss.com/docs/saturate\n             */\n            saturate: [{ saturate: [saturate] }],\n            /**\n             * Sepia\n             * @see https://tailwindcss.com/docs/sepia\n             */\n            sepia: [{ sepia: [sepia] }],\n            /**\n             * Backdrop Filter\n             * @deprecated since Tailwind CSS v3.0.0\n             * @see https://tailwindcss.com/docs/backdrop-filter\n             */\n            'backdrop-filter': [{ 'backdrop-filter': ['', 'none'] }],\n            /**\n             * Backdrop Blur\n             * @see https://tailwindcss.com/docs/backdrop-blur\n             */\n            'backdrop-blur': [{ 'backdrop-blur': [blur] }],\n            /**\n             * Backdrop Brightness\n             * @see https://tailwindcss.com/docs/backdrop-brightness\n             */\n            'backdrop-brightness': [{ 'backdrop-brightness': [brightness] }],\n            /**\n             * Backdrop Contrast\n             * @see https://tailwindcss.com/docs/backdrop-contrast\n             */\n            'backdrop-contrast': [{ 'backdrop-contrast': [contrast] }],\n            /**\n             * Backdrop Grayscale\n             * @see https://tailwindcss.com/docs/backdrop-grayscale\n             */\n            'backdrop-grayscale': [{ 'backdrop-grayscale': [grayscale] }],\n            /**\n             * Backdrop Hue Rotate\n             * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n             */\n            'backdrop-hue-rotate': [{ 'backdrop-hue-rotate': [hueRotate] }],\n            /**\n             * Backdrop Invert\n             * @see https://tailwindcss.com/docs/backdrop-invert\n             */\n            'backdrop-invert': [{ 'backdrop-invert': [invert] }],\n            /**\n             * Backdrop Opacity\n             * @see https://tailwindcss.com/docs/backdrop-opacity\n             */\n            'backdrop-opacity': [{ 'backdrop-opacity': [opacity] }],\n            /**\n             * Backdrop Saturate\n             * @see https://tailwindcss.com/docs/backdrop-saturate\n             */\n            'backdrop-saturate': [{ 'backdrop-saturate': [saturate] }],\n            /**\n             * Backdrop Sepia\n             * @see https://tailwindcss.com/docs/backdrop-sepia\n             */\n            'backdrop-sepia': [{ 'backdrop-sepia': [sepia] }],\n            // Tables\n            /**\n             * Border Collapse\n             * @see https://tailwindcss.com/docs/border-collapse\n             */\n            'border-collapse': [{ border: ['collapse', 'separate'] }],\n            /**\n             * Border Spacing\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing': [{ 'border-spacing': [borderSpacing] }],\n            /**\n             * Border Spacing X\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing-x': [{ 'border-spacing-x': [borderSpacing] }],\n            /**\n             * Border Spacing Y\n             * @see https://tailwindcss.com/docs/border-spacing\n             */\n            'border-spacing-y': [{ 'border-spacing-y': [borderSpacing] }],\n            /**\n             * Table Layout\n             * @see https://tailwindcss.com/docs/table-layout\n             */\n            'table-layout': [{ table: ['auto', 'fixed'] }],\n            /**\n             * Caption Side\n             * @see https://tailwindcss.com/docs/caption-side\n             */\n            caption: [{ caption: ['top', 'bottom'] }],\n            // Transitions and Animation\n            /**\n             * Tranisition Property\n             * @see https://tailwindcss.com/docs/transition-property\n             */\n            transition: [\n                {\n                    transition: [\n                        'none',\n                        'all',\n                        '',\n                        'colors',\n                        'opacity',\n                        'shadow',\n                        'transform',\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Transition Duration\n             * @see https://tailwindcss.com/docs/transition-duration\n             */\n            duration: [{ duration: getNumberAndArbitrary() }],\n            /**\n             * Transition Timing Function\n             * @see https://tailwindcss.com/docs/transition-timing-function\n             */\n            ease: [{ ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue] }],\n            /**\n             * Transition Delay\n             * @see https://tailwindcss.com/docs/transition-delay\n             */\n            delay: [{ delay: getNumberAndArbitrary() }],\n            /**\n             * Animation\n             * @see https://tailwindcss.com/docs/animation\n             */\n            animate: [{ animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue] }],\n            // Transforms\n            /**\n             * Transform\n             * @see https://tailwindcss.com/docs/transform\n             */\n            transform: [{ transform: ['', 'gpu', 'none'] }],\n            /**\n             * Scale\n             * @see https://tailwindcss.com/docs/scale\n             */\n            scale: [{ scale: [scale] }],\n            /**\n             * Scale X\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-x': [{ 'scale-x': [scale] }],\n            /**\n             * Scale Y\n             * @see https://tailwindcss.com/docs/scale\n             */\n            'scale-y': [{ 'scale-y': [scale] }],\n            /**\n             * Rotate\n             * @see https://tailwindcss.com/docs/rotate\n             */\n            rotate: [{ rotate: [isInteger, isArbitraryValue] }],\n            /**\n             * Translate X\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-x': [{ 'translate-x': [translate] }],\n            /**\n             * Translate Y\n             * @see https://tailwindcss.com/docs/translate\n             */\n            'translate-y': [{ 'translate-y': [translate] }],\n            /**\n             * Skew X\n             * @see https://tailwindcss.com/docs/skew\n             */\n            'skew-x': [{ 'skew-x': [skew] }],\n            /**\n             * Skew Y\n             * @see https://tailwindcss.com/docs/skew\n             */\n            'skew-y': [{ 'skew-y': [skew] }],\n            /**\n             * Transform Origin\n             * @see https://tailwindcss.com/docs/transform-origin\n             */\n            'transform-origin': [\n                {\n                    origin: [\n                        'center',\n                        'top',\n                        'top-right',\n                        'right',\n                        'bottom-right',\n                        'bottom',\n                        'bottom-left',\n                        'left',\n                        'top-left',\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            // Interactivity\n            /**\n             * Accent Color\n             * @see https://tailwindcss.com/docs/accent-color\n             */\n            accent: [{ accent: ['auto', colors] }],\n            /**\n             * Appearance\n             * @see https://tailwindcss.com/docs/appearance\n             */\n            appearance: ['appearance-none'],\n            /**\n             * Cursor\n             * @see https://tailwindcss.com/docs/cursor\n             */\n            cursor: [\n                {\n                    cursor: [\n                        'auto',\n                        'default',\n                        'pointer',\n                        'wait',\n                        'text',\n                        'move',\n                        'help',\n                        'not-allowed',\n                        'none',\n                        'context-menu',\n                        'progress',\n                        'cell',\n                        'crosshair',\n                        'vertical-text',\n                        'alias',\n                        'copy',\n                        'no-drop',\n                        'grab',\n                        'grabbing',\n                        'all-scroll',\n                        'col-resize',\n                        'row-resize',\n                        'n-resize',\n                        'e-resize',\n                        's-resize',\n                        'w-resize',\n                        'ne-resize',\n                        'nw-resize',\n                        'se-resize',\n                        'sw-resize',\n                        'ew-resize',\n                        'ns-resize',\n                        'nesw-resize',\n                        'nwse-resize',\n                        'zoom-in',\n                        'zoom-out',\n                        isArbitraryValue,\n                    ],\n                },\n            ],\n            /**\n             * Caret Color\n             * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n             */\n            'caret-color': [{ caret: [colors] }],\n            /**\n             * Pointer Events\n             * @see https://tailwindcss.com/docs/pointer-events\n             */\n            'pointer-events': [{ 'pointer-events': ['none', 'auto'] }],\n            /**\n             * Resize\n             * @see https://tailwindcss.com/docs/resize\n             */\n            resize: [{ resize: ['none', 'y', 'x', ''] }],\n            /**\n             * Scroll Behavior\n             * @see https://tailwindcss.com/docs/scroll-behavior\n             */\n            'scroll-behavior': [{ scroll: ['auto', 'smooth'] }],\n            /**\n             * Scroll Margin\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-m': [{ 'scroll-m': [spacing] }],\n            /**\n             * Scroll Margin X\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mx': [{ 'scroll-mx': [spacing] }],\n            /**\n             * Scroll Margin Y\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-my': [{ 'scroll-my': [spacing] }],\n            /**\n             * Scroll Margin Start\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-ms': [{ 'scroll-ms': [spacing] }],\n            /**\n             * Scroll Margin End\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-me': [{ 'scroll-me': [spacing] }],\n            /**\n             * Scroll Margin Top\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mt': [{ 'scroll-mt': [spacing] }],\n            /**\n             * Scroll Margin Right\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mr': [{ 'scroll-mr': [spacing] }],\n            /**\n             * Scroll Margin Bottom\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-mb': [{ 'scroll-mb': [spacing] }],\n            /**\n             * Scroll Margin Left\n             * @see https://tailwindcss.com/docs/scroll-margin\n             */\n            'scroll-ml': [{ 'scroll-ml': [spacing] }],\n            /**\n             * Scroll Padding\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-p': [{ 'scroll-p': [spacing] }],\n            /**\n             * Scroll Padding X\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-px': [{ 'scroll-px': [spacing] }],\n            /**\n             * Scroll Padding Y\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-py': [{ 'scroll-py': [spacing] }],\n            /**\n             * Scroll Padding Start\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-ps': [{ 'scroll-ps': [spacing] }],\n            /**\n             * Scroll Padding End\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pe': [{ 'scroll-pe': [spacing] }],\n            /**\n             * Scroll Padding Top\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pt': [{ 'scroll-pt': [spacing] }],\n            /**\n             * Scroll Padding Right\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pr': [{ 'scroll-pr': [spacing] }],\n            /**\n             * Scroll Padding Bottom\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pb': [{ 'scroll-pb': [spacing] }],\n            /**\n             * Scroll Padding Left\n             * @see https://tailwindcss.com/docs/scroll-padding\n             */\n            'scroll-pl': [{ 'scroll-pl': [spacing] }],\n            /**\n             * Scroll Snap Align\n             * @see https://tailwindcss.com/docs/scroll-snap-align\n             */\n            'snap-align': [{ snap: ['start', 'end', 'center', 'align-none'] }],\n            /**\n             * Scroll Snap Stop\n             * @see https://tailwindcss.com/docs/scroll-snap-stop\n             */\n            'snap-stop': [{ snap: ['normal', 'always'] }],\n            /**\n             * Scroll Snap Type\n             * @see https://tailwindcss.com/docs/scroll-snap-type\n             */\n            'snap-type': [{ snap: ['none', 'x', 'y', 'both'] }],\n            /**\n             * Scroll Snap Type Strictness\n             * @see https://tailwindcss.com/docs/scroll-snap-type\n             */\n            'snap-strictness': [{ snap: ['mandatory', 'proximity'] }],\n            /**\n             * Touch Action\n             * @see https://tailwindcss.com/docs/touch-action\n             */\n            touch: [\n                {\n                    touch: [\n                        'auto',\n                        'none',\n                        'pinch-zoom',\n                        'manipulation',\n                        { pan: ['x', 'left', 'right', 'y', 'up', 'down'] },\n                    ],\n                },\n            ],\n            /**\n             * User Select\n             * @see https://tailwindcss.com/docs/user-select\n             */\n            select: [{ select: ['none', 'text', 'all', 'auto'] }],\n            /**\n             * Will Change\n             * @see https://tailwindcss.com/docs/will-change\n             */\n            'will-change': [\n                { 'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue] },\n            ],\n            // SVG\n            /**\n             * Fill\n             * @see https://tailwindcss.com/docs/fill\n             */\n            fill: [{ fill: [colors, 'none'] }],\n            /**\n             * Stroke Width\n             * @see https://tailwindcss.com/docs/stroke-width\n             */\n            'stroke-w': [{ stroke: [isLength, isArbitraryNumber] }],\n            /**\n             * Stroke\n             * @see https://tailwindcss.com/docs/stroke\n             */\n            stroke: [{ stroke: [colors, 'none'] }],\n            // Accessibility\n            /**\n             * Screen Readers\n             * @see https://tailwindcss.com/docs/screen-readers\n             */\n            sr: ['sr-only', 'not-sr-only'],\n        },\n        conflictingClassGroups: {\n            overflow: ['overflow-x', 'overflow-y'],\n            overscroll: ['overscroll-x', 'overscroll-y'],\n            inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n            'inset-x': ['right', 'left'],\n            'inset-y': ['top', 'bottom'],\n            flex: ['basis', 'grow', 'shrink'],\n            gap: ['gap-x', 'gap-y'],\n            p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n            px: ['pr', 'pl'],\n            py: ['pt', 'pb'],\n            m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n            mx: ['mr', 'ml'],\n            my: ['mt', 'mb'],\n            'font-size': ['leading'],\n            'fvn-normal': [\n                'fvn-ordinal',\n                'fvn-slashed-zero',\n                'fvn-figure',\n                'fvn-spacing',\n                'fvn-fraction',\n            ],\n            'fvn-ordinal': ['fvn-normal'],\n            'fvn-slashed-zero': ['fvn-normal'],\n            'fvn-figure': ['fvn-normal'],\n            'fvn-spacing': ['fvn-normal'],\n            'fvn-fraction': ['fvn-normal'],\n            rounded: [\n                'rounded-s',\n                'rounded-e',\n                'rounded-t',\n                'rounded-r',\n                'rounded-b',\n                'rounded-l',\n                'rounded-ss',\n                'rounded-se',\n                'rounded-ee',\n                'rounded-es',\n                'rounded-tl',\n                'rounded-tr',\n                'rounded-br',\n                'rounded-bl',\n            ],\n            'rounded-s': ['rounded-ss', 'rounded-es'],\n            'rounded-e': ['rounded-se', 'rounded-ee'],\n            'rounded-t': ['rounded-tl', 'rounded-tr'],\n            'rounded-r': ['rounded-tr', 'rounded-br'],\n            'rounded-b': ['rounded-br', 'rounded-bl'],\n            'rounded-l': ['rounded-tl', 'rounded-bl'],\n            'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n            'border-w': [\n                'border-w-s',\n                'border-w-e',\n                'border-w-t',\n                'border-w-r',\n                'border-w-b',\n                'border-w-l',\n            ],\n            'border-w-x': ['border-w-r', 'border-w-l'],\n            'border-w-y': ['border-w-t', 'border-w-b'],\n            'border-color': [\n                'border-color-t',\n                'border-color-r',\n                'border-color-b',\n                'border-color-l',\n            ],\n            'border-color-x': ['border-color-r', 'border-color-l'],\n            'border-color-y': ['border-color-t', 'border-color-b'],\n            'scroll-m': [\n                'scroll-mx',\n                'scroll-my',\n                'scroll-ms',\n                'scroll-me',\n                'scroll-mt',\n                'scroll-mr',\n                'scroll-mb',\n                'scroll-ml',\n            ],\n            'scroll-mx': ['scroll-mr', 'scroll-ml'],\n            'scroll-my': ['scroll-mt', 'scroll-mb'],\n            'scroll-p': [\n                'scroll-px',\n                'scroll-py',\n                'scroll-ps',\n                'scroll-pe',\n                'scroll-pt',\n                'scroll-pr',\n                'scroll-pb',\n                'scroll-pl',\n            ],\n            'scroll-px': ['scroll-pr', 'scroll-pl'],\n            'scroll-py': ['scroll-pt', 'scroll-pb'],\n        },\n        conflictingClassGroupModifiers: {\n            'font-size': ['leading'],\n        },\n    } as const satisfies Config\n}\n", "import { createTailwindMerge } from './create-tailwind-merge'\nimport { getDefaultConfig } from './default-config'\n\nexport const twMerge = createTailwindMerge(getDefaultConfig)\n", "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n", "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\"bg-primary font-medium text-primary-foreground\", className)}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n", "export default {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none',\n  stroke: 'currentColor',\n  strokeWidth: 2,\n  strokeLinecap: 'round',\n  strokeLinejoin: 'round',\n};\n", "import { forwardRef, createElement, ReactSVG, SVGProps } from 'react';\nimport defaultAttributes from './defaultAttributes';\n\ntype IconNode = [elementName: keyof ReactSVG, attrs: Record<string, string>][]\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>\n\nexport interface LucideProps extends SVGAttributes {\n  size?: string | number\n}\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) => string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nconst createReactComponent = (iconName: string, iconNode: IconNode) => {\n  const Component = forwardRef<SVGSVGElement, LucideProps>(\n    ({ color = 'currentColor', size = 24, strokeWidth = 2, children, ...rest }, ref) =>\n      createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes,\n          width: size,\n          height: size,\n          stroke: color,\n          strokeWidth,\n          className: `lucide lucide-${toKebabCase(iconName)}`,\n          ...rest,\n        },\n        [\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(\n            (Array.isArray(children) ? children : [children]) || []\n          )\n        ],\n      ),\n  );\n\n  Component.displayName = `${iconName}`;\n\n  return Component;\n};\n\nexport default createReactComponent\n", "import createReactComponent from '../createReactComponent';\n\nconst ArrowUpDown = createReactComponent('ArrowUpDown', [\n  ['polyline', { points: '11 17 7 21 3 17', key: 'dv0ycv' }],\n  ['line', { x1: '7', y1: '21', x2: '7', y2: '9', key: '1cxv4h' }],\n  ['polyline', { points: '21 7 17 3 13 7', key: '1su31j' }],\n  ['line', { x1: '17', y1: '15', x2: '17', y2: '3', key: 'r3527w' }],\n]);\n\nexport default ArrowUpDown;\n", "\"use client\"\n\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { ArrowUpDown } from \"lucide-react\"\n\nimport { Button } from \"./button\"\n\nexport type Payment = {\n  id: string\n  amount: number\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\n  email: string\n}\nexport type Contributor = {\n  name: string\n  home: string\n  openPRsNumber: number\n  mergedPRsNumber: number\n  issuesNumber: number\n}\n\nexport const columns: ColumnDef<Contributor>[] = [\n  {\n    accessorKey: \"name\",\n    header: \"Name\",\n    cell: ({ row }) => (\n      <div className=\"m-5 ml-10 capitalize\">{row.getValue(\"name\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"home\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n        >\n          GitHub\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      )\n    },\n    cell: ({ row }) => (\n      <div className=\"ml-10 lowercase\">{row.getValue(\"home\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"openPRsNumber\",\n    header: () => <div className=\"text-right\">Open PRs</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"openPRsNumber\"))\n      return <div className=\"m-5 text-right font-medium\">{amount}</div>\n    },\n  },\n  {\n    accessorKey: \"issuesNumber\",\n    header: () => <div className=\"text-right\">Open Issues</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"issuesNumber\"))\n      return <div className=\"m-5 text-right font-medium\">{amount}</div>\n    },\n  },\n  {\n    accessorKey: \"mergedPRsNumber\",\n    header: () => <div className=\"text-right\">Merged PRs</div>,\n    cell: ({ row }) => {\n      const amount = parseFloat(row.getValue(\"mergedPRsNumber\"))\n      return <div className=\"m-5 text-right font-medium\">{amount}</div>\n    },\n  },\n]\n"],
  "mappings": "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",
  "names": ["leaderboard_exports", "__export", "DataTable", "columns", "getData", "__toCommonJS", "React", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "resolvedColumnDef", "_getDefaultColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "Error", "column", "columns", "getFlatColumns", "_column$columns", "flatMap", "_table$options$debugA", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "_table$options$debugA2", "_features", "reduce", "obj", "feature", "Object", "assign", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "buildHeaderGroups", "process", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "_table$options$debugA3", "getRightHeaderGroups", "_right$map$filter2", "_table$options$debugA4", "getFooterGroups", "headerGroups", "reverse", "_table$options$debugA5", "getLeftFooterGroups", "_table$options$debugA6", "getCenterFooterGroups", "_table$options$debugA7", "getRightFooterGroups", "_table$options$debugA8", "getFlatHeaders", "headers", "_table$options$debugA9", "getLeftFlatHeaders", "_table$options$debugA10", "getCenterFlatHeaders", "_table$options$debugA11", "getRightFlatHeaders", "_table$options$debugA12", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "_table$options$debugA13", "getLeftLeafHeaders", "_header$subHeaders2", "_table$options$debugA14", "getRightLeafHeaders", "_header$subHeaders3", "_table$options$debugA15", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "_table$options$debugA16", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "_column$columnDef$ena", "_table$options$enable", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "_ref3", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "_table$initialState$c", "initialState", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "_table$initialState", "getCanSomeRowsExpand", "getPrePaginationRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "values", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "_row$subRows", "getRowCanExpand", "enableExpanding", "subRows", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "_row$getValue", "_row$getValue$toStrin", "_row$getValue$toStrin2", "search", "toLowerCase", "getValue", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "_row$getValue2$toStri", "equalsString", "_row$getValue3", "_row$getValue3$toStri", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "_table$getCoreRowMode2", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "_column$columnDef$ena2", "_table$options$enable3", "_table$options$enable4", "_table$options$getCol", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "_table$getState$colum4", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "_table$options$filter3", "_table$options$filter4", "getAllLeafColumns", "updateFn", "_functionalUpdate", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "getGroupingValue", "_groupingValuesCache", "hasOwnProperty", "original", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "_table$initialState$p3", "resetPageSize", "_table$initialState$p4", "_table$initialState2", "_table$initialState2$", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "rows", "getDefaultPinningState", "Pinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "_table$initialState$r", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "_target", "getRow", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "allChildrenSelected", "someSelected", "subRow", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "Sorting", "sorting", "sortingFn", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "cells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "_options$initialState", "defaultOptions", "mergeOptions", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "defaultColumn", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "_cell$getValue", "renderFallbackValue", "rowIndex", "parentId", "_valuesCache", "_uniqueValuesCache", "getUniqueValues", "getLeafRows", "getParentRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getCoreRowModel", "table", "memo", "options", "data", "rowModel", "rows", "flatRows", "rowsById", "accessRows", "originalRows", "depth", "parentRow", "i", "length", "row", "createRow", "_getRowId", "undefined", "id", "push", "getSubRows", "_row$originalSubRows", "originalSubRows", "subRows", "key", "process", "debug", "_table$options$debugA", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "filterRows", "filterRowImpl", "filterFromLeafRows", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "maxDepth", "maxLeafRowFilterDepth", "recurseFilterRows", "_row$subRows", "newRow", "original", "index", "parentId", "columnFilters", "_table$options$maxLea2", "_row$subRows2", "getFilteredRowModel", "getPreFilteredRowModel", "getState", "globalFilter", "columnFiltersMeta", "resolvedColumnFilters", "resolvedGlobalFilters", "forEach", "d", "_filterFn$resolveFilt", "column", "getColumn", "filterFn", "getFilterFn", "resolvedValue", "resolveFilterValue", "value", "filterableIds", "map", "globalFilterFn", "getGlobalFilterFn", "globallyFilterableColumns", "getAllLeafColumns", "filter", "getCanGlobalFilter", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "j", "filterMeta", "__global__", "filterRowsImpl", "getSortedRowModel", "table", "memo", "getState", "sorting", "getPreSortedRowModel", "rowModel", "rows", "length", "sortingState", "sortedFlatRows", "availableSorting", "filter", "sort", "_table$getColumn", "getColumn", "id", "getCanSort", "columnInfoById", "forEach", "sortEntry", "column", "sortUndefined", "columnDef", "invertSorting", "sortingFn", "getSortingFn", "sortData", "sortedData", "rowA", "rowB", "i", "_sortEntry$desc", "columnInfo", "isDesc", "desc", "aValue", "getValue", "bValue", "aUndefined", "bUndefined", "sortInt", "index", "row", "_row$subRows", "push", "subRows", "flatRows", "rowsById", "key", "process", "debug", "_table$options$debugA", "options", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "expandRows", "rowModel", "expandedRows", "handleRow", "row", "_row$subRows", "push", "subRows", "length", "getIsExpanded", "forEach", "rows", "flatRows", "rowsById", "getPaginationRowModel", "opts", "table", "memo", "getState", "pagination", "getPrePaginationRowModel", "options", "paginateExpandedRows", "undefined", "expanded", "pageSize", "pageIndex", "pageStart", "pageEnd", "slice", "paginatedRowModel", "key", "process", "debug", "_table$options$debugA", "debugAll", "debugTable", "flexRender", "Comp", "props", "isReactComponent", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "React", "falsyToString", "value", "cx", "_len", "classes", "_key", "cva", "base", "config", "props", "ref", "variants", "defaultVariants", "getVariantClassNames", "variant", "variantProp", "defaultVariantProp", "variantKey", "propsWithoutUndefined", "acc", "param", "key", "getCompoundVariantClassNames", "param1", "cvClass", "cvClassName", "compoundVariantOptions", "r", "t", "f", "n", "clsx", "twJoin", "index", "argument", "resolvedValue", "string", "arguments", "length", "toValue", "mix", "k", "CLASS_PART_SEPARATOR", "createClassUtils", "config", "classMap", "createClassMap", "conflictingClassGroups", "_config$conflictingCl", "conflictingClassGroupModifiers", "getClassGroupId", "className", "classParts", "split", "length", "shift", "getGroupRecursive", "getGroupIdForArbitraryProperty", "getConflictingClassGroupIds", "classGroupId", "hasPostfixModifier", "conflicts", "classPartObject", "currentClassPart", "nextClassPartObject", "nextPart", "get", "classGroupFromNextClassPart", "slice", "undefined", "validators", "classRest", "join", "find", "_ref", "validator", "arbitraryPropertyRegex", "test", "arbitraryPropertyClassName", "exec", "property", "substring", "indexOf", "theme", "prefix", "Map", "prefixedClassGroupEntries", "getPrefixedClassGroupEntries", "Object", "entries", "classGroups", "forEach", "_ref2", "classGroup", "processClassesRecursively", "classDefinition", "classPartObjectToEdit", "getPart", "isThemeGetter", "push", "_ref3", "key", "path", "currentClassPartObject", "pathPart", "has", "set", "func", "classGroupEntries", "map", "_ref4", "prefixedClassGroup", "fromEntries", "_ref5", "value", "createLruCache", "maxCacheSize", "get", "set", "cacheSize", "cache", "Map", "previousCache", "update", "key", "value", "undefined", "has", "IMPORTANT_MODIFIER", "createSplitModifiers", "config", "separator", "isSeparatorSingleCharacter", "length", "firstSeparatorCharacter", "separatorLength", "className", "modifiers", "bracketDepth", "modifierStart", "postfixModifierPosition", "index", "currentCharacter", "slice", "push", "baseClassNameWithImportantModifier", "substring", "hasImportantModifier", "startsWith", "baseClassName", "maybePostfixModifierPosition", "undefined", "sortModifiers", "sortedModifiers", "unsortedModifiers", "forEach", "modifier", "isArbitraryVariant", "sort", "createConfigUtils", "config", "cache", "createLruCache", "cacheSize", "splitModifiers", "createSplitModifiers", "createClassUtils", "SPLIT_CLASSES_REGEX", "mergeClassList", "classList", "configUtils", "splitModifiers", "getClassGroupId", "getConflictingClassGroupIds", "classGroupsInConflict", "Set", "trim", "split", "map", "originalClassName", "modifiers", "_splitModifiers", "hasImportantModifier", "baseClassName", "maybePostfixModifierPosition", "classGroupId", "substring", "hasPostfixModifier", "Boolean", "isTailwindClass", "variantModifier", "sortModifiers", "join", "modifierId", "IMPORTANT_MODIFIER", "reverse", "filter", "parsed", "classId", "has", "add", "forEach", "group", "createTailwindMerge", "_len", "createConfig", "_key", "configUtils", "cacheGet", "cacheSet", "functionToCall", "initTailwindMerge", "classList", "firstCreateConfig", "restCreateConfig", "config", "reduce", "previousConfig", "createConfigCurrent", "createConfigUtils", "cache", "get", "set", "tailwindMerge", "cachedResult", "result", "mergeClassList", "twJoin", "apply", "arguments", "fromTheme", "key", "themeGetter", "theme", "isThemeGetter", "arbitraryValueRegex", "fractionRegex", "stringLengths", "Set", "tshirtUnitRegex", "lengthUnitRegex", "shadowRegex", "isLength", "value", "isNumber", "has", "test", "isArbitraryLength", "getIsArbitraryValue", "isLengthOnly", "isArbitrarySize", "isNever", "isArbitraryPosition", "isArbitraryUrl", "isUrl", "isArbitraryNumber", "isNumber", "value", "Number", "isNaN", "isPercent", "endsWith", "slice", "isInteger", "isIntegerOnly", "getIsArbitraryValue", "isArbitraryValue", "arbitraryValueRegex", "test", "isAny", "isTshirtSize", "tshirtUnitRegex", "isArbitraryShadow", "isShadow", "label", "testValue", "result", "exec", "isLengthOnly", "lengthUnitRegex", "isNever", "isUrl", "startsWith", "shadowRegex", "getDefaultConfig", "colors", "fromTheme", "spacing", "blur", "brightness", "borderColor", "borderRadius", "borderSpacing", "borderWidth", "contrast", "grayscale", "hueRotate", "invert", "gap", "gradientColorStops", "gradientColorStopPositions", "inset", "margin", "opacity", "padding", "saturate", "scale", "sepia", "skew", "space", "translate", "getOverscroll", "getOverflow", "getSpacingWithAuto", "getLengthWithEmpty", "isLength", "getNumberWithAutoAndArbitrary", "isNumber", "isArbitraryValue", "getPositions", "getLineStyles", "getBlendModes", "getAlign", "getZeroAndEmpty", "getBreaks", "getNumber", "isArbitraryNumber", "getNumberAndArbitrary", "cacheSize", "theme", "isAny", "isTshirtSize", "isArbitraryLength", "isPercent", "classGroups", "aspect", "container", "columns", "box", "display", "clear", "isolation", "object", "overflow", "overscroll", "position", "start", "end", "top", "right", "bottom", "left", "visibility", "z", "isInteger", "basis", "flex", "grow", "shrink", "order", "col", "span", "row", "justify", "content", "items", "self", "p", "px", "py", "ps", "pe", "pt", "pr", "pb", "pl", "m", "mx", "my", "ms", "me", "mt", "mr", "mb", "ml", "w", "screen", "h", "text", "font", "tracking", "leading", "list", "placeholder", "decoration", "indent", "align", "whitespace", "hyphens", "bg", "isArbitraryPosition", "repeat", "isArbitrarySize", "isArbitraryUrl", "from", "via", "to", "rounded", "border", "divide", "outline", "ring", "shadow", "isArbitraryShadow", "filter", "table", "caption", "transition", "duration", "ease", "delay", "animate", "transform", "rotate", "origin", "accent", "appearance", "cursor", "caret", "resize", "scroll", "snap", "touch", "pan", "select", "fill", "stroke", "sr", "conflictingClassGroups", "conflictingClassGroupModifiers", "twMerge", "createTailwindMerge", "getDefaultConfig", "cn", "inputs", "twMerge", "clsx", "import_jsx_runtime", "buttonVariants", "cva", "Button", "_a", "ref", "_b", "className", "variant", "size", "props", "__objRest", "__spreadValues", "cn", "React", "import_jsx_runtime", "Table", "_a", "ref", "_b", "className", "props", "__objRest", "__spreadValues", "cn", "TableHeader", "TableBody", "TableFooter", "TableRow", "TableHead", "TableCell", "TableCaption", "import_jsx_runtime", "DataTable", "columns", "data", "_a", "sorting", "setSorting", "columnFilters", "setColumnFilters", "columnVisibility", "setColumnVisibility", "rowSelection", "setRowSelection", "table", "useReactTable", "getCoreRowModel", "getPaginationRowModel", "getSortedRowModel", "getFilteredRowModel", "Table", "TableHeader", "headerGroup", "TableRow", "header", "TableHead", "flexRender", "TableBody", "row", "cell", "TableCell", "Button", "defaultAttributes", "toKebabCase", "string", "createReactComponent", "iconName", "iconNode", "Component", "color", "size", "strokeWidth", "children", "rest", "ref", "defaultAttributes", "tag", "attrs", "ArrowUpDown", "createReactComponent", "import_jsx_runtime", "columns", "row", "column", "Button", "ArrowUpDown", "amount", "getData", "fetchUrl", "__async", "data", "objectArray", "username", "user", "__spreadValues"]
}
